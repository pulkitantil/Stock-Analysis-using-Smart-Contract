// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StockAnalysis {
    struct Report {
        string stock;
        string analysis;
        address submitter;
    }

    Report[] private reports;
    address public immutable admin;
    mapping(address => bool) public authorized;
    mapping(bytes32 => bool) private submittedHashes;

    event ReportSubmitted(address indexed submitter, string stock, string analysis);

    modifier onlyAuthorized() {
        require(authorized[msg.sender], "Not authorized to submit reports");
        _;
    }

    constructor() {
        admin = msg.sender;
        authorized[msg.sender] = true;
    }

    function authorizeUser(address _user) external {
        require(msg.sender == admin, "Only admin can authorize");
        authorized[_user] = true;
    }

    function submitAnalysis(string memory _stock, string memory _analysis) public onlyAuthorized {
        bytes32 hash = keccak256(abi.encodePacked(_stock, _analysis, msg.sender));
        require(!submittedHashes[hash], "Duplicate submission detected");

        reports.push(Report(_stock, _analysis, msg.sender));
        submittedHashes[hash] = true;

        emit ReportSubmitted(msg.sender, _stock, _analysis);
    }

    function getAllReports() public view returns (Report[] memory) {
        return reports;
    }
}
